# JMH version: 1.35
# VM version: JDK 19, OpenJDK 64-Bit Server VM, 19+35-2237
# VM invoker: /Library/Java/JavaVirtualMachines/jdk-19.jdk/Contents/Home/bin/java
# VM options: -Xmx2g -XX:+UseG1GC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.BenchmarkPreAllocated.testHashMapConstructor
# Parameters: (capacity = 10, readFromCollection = true)

# Run progress: 0.00% complete, ETA 00:02:24
# Fork: 1 of 3
# Warmup Iteration   1: 78809.902 ns/op
# Warmup Iteration   2: 67076.363 ns/op
# Warmup Iteration   3: 72752.245 ns/op
Iteration   1: 71923.059 ns/op
Iteration   2: 72600.073 ns/op
Iteration   3: 75069.271 ns/op

# Run progress: 4.17% complete, ETA 00:02:30
# Fork: 2 of 3
# Warmup Iteration   1: 72364.842 ns/op
# Warmup Iteration   2: 63954.268 ns/op
# Warmup Iteration   3: 73074.687 ns/op
Iteration   1: 70688.672 ns/op
Iteration   2: 70164.523 ns/op
Iteration   3: 70950.285 ns/op

# Run progress: 8.33% complete, ETA 00:02:22
# Fork: 3 of 3
# Warmup Iteration   1: 70448.522 ns/op
# Warmup Iteration   2: 69966.161 ns/op
# Warmup Iteration   3: 69955.757 ns/op
Iteration   1: 70559.342 ns/op
Iteration   2: 90324.504 ns/op
Iteration   3: 68333.157 ns/op


Result "org.sample.BenchmarkPreAllocated.testHashMapConstructor":
  73401.432 ±(99.9%) 11108.831 ns/op [Average]
  (min, avg, max) = (68333.157, 73401.432, 90324.504), stdev = 6610.687
  CI (99.9%): [62292.601, 84510.263] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 19, OpenJDK 64-Bit Server VM, 19+35-2237
# VM invoker: /Library/Java/JavaVirtualMachines/jdk-19.jdk/Contents/Home/bin/java
# VM options: -Xmx2g -XX:+UseG1GC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.BenchmarkPreAllocated.testHashMapConstructor
# Parameters: (capacity = 100, readFromCollection = true)

# Run progress: 12.50% complete, ETA 00:02:15
# Fork: 1 of 3
# Warmup Iteration   1: 654257.445 ns/op
# Warmup Iteration   2: 706487.980 ns/op
# Warmup Iteration   3: 704958.805 ns/op
Iteration   1: 748932.458 ns/op
Iteration   2: 799544.243 ns/op
Iteration   3: 710615.413 ns/op

# Run progress: 16.67% complete, ETA 00:02:09
# Fork: 2 of 3
# Warmup Iteration   1: 778392.226 ns/op
# Warmup Iteration   2: 648673.399 ns/op
# Warmup Iteration   3: 701635.286 ns/op
Iteration   1: 847799.541 ns/op
Iteration   2: 699347.028 ns/op
Iteration   3: 711544.004 ns/op

# Run progress: 20.83% complete, ETA 00:02:02
# Fork: 3 of 3
# Warmup Iteration   1: 728756.447 ns/op
# Warmup Iteration   2: 709527.588 ns/op
# Warmup Iteration   3: 710315.050 ns/op
Iteration   1: 822809.985 ns/op
Iteration   2: 695933.302 ns/op
Iteration   3: 701857.880 ns/op


Result "org.sample.BenchmarkPreAllocated.testHashMapConstructor":
  748709.317 ±(99.9%) 99670.183 ns/op [Average]
  (min, avg, max) = (695933.302, 748709.317, 847799.541), stdev = 59312.127
  CI (99.9%): [649039.134, 848379.500] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 19, OpenJDK 64-Bit Server VM, 19+35-2237
# VM invoker: /Library/Java/JavaVirtualMachines/jdk-19.jdk/Contents/Home/bin/java
# VM options: -Xmx2g -XX:+UseG1GC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.BenchmarkPreAllocated.testHashMapFactory
# Parameters: (capacity = 10, readFromCollection = true)

# Run progress: 25.00% complete, ETA 00:01:55
# Fork: 1 of 3
# Warmup Iteration   1: 68229.990 ns/op
# Warmup Iteration   2: 64561.079 ns/op
# Warmup Iteration   3: 80497.385 ns/op
Iteration   1: 77612.218 ns/op
Iteration   2: 70421.956 ns/op
Iteration   3: 69742.739 ns/op

# Run progress: 29.17% complete, ETA 00:01:49
# Fork: 2 of 3
# Warmup Iteration   1: 66849.278 ns/op
# Warmup Iteration   2: 67180.825 ns/op
# Warmup Iteration   3: 84501.477 ns/op
Iteration   1: 72026.313 ns/op
Iteration   2: 70177.360 ns/op
Iteration   3: 70512.602 ns/op

# Run progress: 33.33% complete, ETA 00:01:43
# Fork: 3 of 3
# Warmup Iteration   1: 66006.109 ns/op
# Warmup Iteration   2: 66556.084 ns/op
# Warmup Iteration   3: 113249.994 ns/op
Iteration   1: 117355.898 ns/op
Iteration   2: 110907.127 ns/op
Iteration   3: 112134.268 ns/op


Result "org.sample.BenchmarkPreAllocated.testHashMapFactory":
  85654.498 ±(99.9%) 35390.475 ns/op [Average]
  (min, avg, max) = (69742.739, 85654.498, 117355.898), stdev = 21060.304
  CI (99.9%): [50264.023, 121044.972] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 19, OpenJDK 64-Bit Server VM, 19+35-2237
# VM invoker: /Library/Java/JavaVirtualMachines/jdk-19.jdk/Contents/Home/bin/java
# VM options: -Xmx2g -XX:+UseG1GC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.BenchmarkPreAllocated.testHashMapFactory
# Parameters: (capacity = 100, readFromCollection = true)

# Run progress: 37.50% complete, ETA 00:01:37
# Fork: 1 of 3
# Warmup Iteration   1: 1031404.145 ns/op
# Warmup Iteration   2: 1138553.721 ns/op
# Warmup Iteration   3: 1168616.303 ns/op
Iteration   1: 1117081.910 ns/op
Iteration   2: 1040476.562 ns/op
Iteration   3: 1132550.855 ns/op

# Run progress: 41.67% complete, ETA 00:01:30
# Fork: 2 of 3
# Warmup Iteration   1: 1000216.924 ns/op
# Warmup Iteration   2: 1147129.253 ns/op
# Warmup Iteration   3: 726309.686 ns/op
Iteration   1: 713838.623 ns/op
Iteration   2: 698798.797 ns/op
Iteration   3: 971456.454 ns/op

# Run progress: 45.83% complete, ETA 00:01:24
# Fork: 3 of 3
# Warmup Iteration   1: 1015841.357 ns/op
# Warmup Iteration   2: 1156982.485 ns/op
# Warmup Iteration   3: 1115627.514 ns/op
Iteration   1: 1160424.962 ns/op
Iteration   2: 1140321.505 ns/op
Iteration   3: 1188997.562 ns/op


Result "org.sample.BenchmarkPreAllocated.testHashMapFactory":
  1018216.359 ±(99.9%) 316897.577 ns/op [Average]
  (min, avg, max) = (698798.797, 1018216.359, 1188997.562), stdev = 188580.665
  CI (99.9%): [701318.782, 1335113.936] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 19, OpenJDK 64-Bit Server VM, 19+35-2237
# VM invoker: /Library/Java/JavaVirtualMachines/jdk-19.jdk/Contents/Home/bin/java
# VM options: -Xmx2g -XX:+UseG1GC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.BenchmarkPreAllocated.testHashSetConstructor
# Parameters: (capacity = 10, readFromCollection = true)

# Run progress: 50.00% complete, ETA 00:01:17
# Fork: 1 of 3
# Warmup Iteration   1: 100687.980 ns/op
# Warmup Iteration   2: 112679.770 ns/op
# Warmup Iteration   3: 113061.976 ns/op
Iteration   1: 118818.073 ns/op
Iteration   2: 112780.709 ns/op
Iteration   3: 112995.917 ns/op

# Run progress: 54.17% complete, ETA 00:01:11
# Fork: 2 of 3
# Warmup Iteration   1: 101673.316 ns/op
# Warmup Iteration   2: 113395.847 ns/op
# Warmup Iteration   3: 112743.107 ns/op
Iteration   1: 118056.101 ns/op
Iteration   2: 109692.854 ns/op
Iteration   3: 73448.606 ns/op

# Run progress: 58.33% complete, ETA 00:01:04
# Fork: 3 of 3
# Warmup Iteration   1: 66602.840 ns/op
# Warmup Iteration   2: 73413.863 ns/op
# Warmup Iteration   3: 70478.887 ns/op
Iteration   1: 97678.754 ns/op
Iteration   2: 115253.912 ns/op
Iteration   3: 112113.809 ns/op


Result "org.sample.BenchmarkPreAllocated.testHashSetConstructor":
  107870.971 ±(99.9%) 24049.574 ns/op [Average]
  (min, avg, max) = (73448.606, 107870.971, 118818.073), stdev = 14311.515
  CI (99.9%): [83821.397, 131920.544] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 19, OpenJDK 64-Bit Server VM, 19+35-2237
# VM invoker: /Library/Java/JavaVirtualMachines/jdk-19.jdk/Contents/Home/bin/java
# VM options: -Xmx2g -XX:+UseG1GC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.BenchmarkPreAllocated.testHashSetConstructor
# Parameters: (capacity = 100, readFromCollection = true)

# Run progress: 62.50% complete, ETA 00:00:58
# Fork: 1 of 3
# Warmup Iteration   1: 1013490.880 ns/op
# Warmup Iteration   2: 1192113.284 ns/op
# Warmup Iteration   3: 1116772.434 ns/op
Iteration   1: 1166037.864 ns/op
Iteration   2: 1134971.701 ns/op
Iteration   3: 1126570.505 ns/op

# Run progress: 66.67% complete, ETA 00:00:51
# Fork: 2 of 3
# Warmup Iteration   1: 1007722.521 ns/op
# Warmup Iteration   2: 1154635.858 ns/op
# Warmup Iteration   3: 1162355.533 ns/op
Iteration   1: 1199571.691 ns/op
Iteration   2: 1161919.540 ns/op
Iteration   3: 1113645.548 ns/op

# Run progress: 70.83% complete, ETA 00:00:45
# Fork: 3 of 3
# Warmup Iteration   1: 997246.547 ns/op
# Warmup Iteration   2: 1171551.656 ns/op
# Warmup Iteration   3: 1116399.847 ns/op
Iteration   1: 1157620.994 ns/op
Iteration   2: 1139561.235 ns/op
Iteration   3: 1141148.616 ns/op


Result "org.sample.BenchmarkPreAllocated.testHashSetConstructor":
  1149005.299 ±(99.9%) 42799.860 ns/op [Average]
  (min, avg, max) = (1113645.548, 1149005.299, 1199571.691), stdev = 25469.510
  CI (99.9%): [1106205.439, 1191805.160] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 19, OpenJDK 64-Bit Server VM, 19+35-2237
# VM invoker: /Library/Java/JavaVirtualMachines/jdk-19.jdk/Contents/Home/bin/java
# VM options: -Xmx2g -XX:+UseG1GC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.BenchmarkPreAllocated.testHashSetFactory
# Parameters: (capacity = 10, readFromCollection = true)

# Run progress: 75.00% complete, ETA 00:00:38
# Fork: 1 of 3
# Warmup Iteration   1: 100031.452 ns/op
# Warmup Iteration   2: 115638.968 ns/op
# Warmup Iteration   3: 117179.637 ns/op
Iteration   1: 112192.831 ns/op
Iteration   2: 116413.459 ns/op
Iteration   3: 110004.584 ns/op

# Run progress: 79.17% complete, ETA 00:00:32
# Fork: 2 of 3
# Warmup Iteration   1: 102686.393 ns/op
# Warmup Iteration   2: 113040.120 ns/op
# Warmup Iteration   3: 112102.117 ns/op
Iteration   1: 107118.398 ns/op
Iteration   2: 113865.150 ns/op
Iteration   3: 111676.907 ns/op

# Run progress: 83.33% complete, ETA 00:00:25
# Fork: 3 of 3
# Warmup Iteration   1: 101361.447 ns/op
# Warmup Iteration   2: 112308.692 ns/op
# Warmup Iteration   3: 114213.641 ns/op
Iteration   1: 113540.589 ns/op
Iteration   2: 112000.418 ns/op
Iteration   3: 109496.794 ns/op


Result "org.sample.BenchmarkPreAllocated.testHashSetFactory":
  111812.125 ±(99.9%) 4572.532 ns/op [Average]
  (min, avg, max) = (107118.398, 111812.125, 116413.459), stdev = 2721.040
  CI (99.9%): [107239.594, 116384.657] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 19, OpenJDK 64-Bit Server VM, 19+35-2237
# VM invoker: /Library/Java/JavaVirtualMachines/jdk-19.jdk/Contents/Home/bin/java
# VM options: -Xmx2g -XX:+UseG1GC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.sample.BenchmarkPreAllocated.testHashSetFactory
# Parameters: (capacity = 100, readFromCollection = true)

# Run progress: 87.50% complete, ETA 00:00:19
# Fork: 1 of 3
# Warmup Iteration   1: 961363.596 ns/op
# Warmup Iteration   2: 1177151.444 ns/op
# Warmup Iteration   3: 1232249.893 ns/op
Iteration   1: 1158528.251 ns/op
Iteration   2: 1097664.812 ns/op
Iteration   3: 1144566.920 ns/op

# Run progress: 91.67% complete, ETA 00:00:12
# Fork: 2 of 3
# Warmup Iteration   1: 1002106.100 ns/op
# Warmup Iteration   2: 1154461.840 ns/op
# Warmup Iteration   3: 1123135.154 ns/op
Iteration   1: 1105079.783 ns/op
Iteration   2: 1158570.182 ns/op
Iteration   3: 1120935.545 ns/op

# Run progress: 95.83% complete, ETA 00:00:06
# Fork: 3 of 3
# Warmup Iteration   1: 1000751.285 ns/op
# Warmup Iteration   2: 1103666.243 ns/op
# Warmup Iteration   3: 972716.773 ns/op
Iteration   1: 1178897.747 ns/op
Iteration   2: 1144782.534 ns/op
Iteration   3: 1080114.808 ns/op


Result "org.sample.BenchmarkPreAllocated.testHashSetFactory":
  1132126.731 ±(99.9%) 55251.560 ns/op [Average]
  (min, avg, max) = (1080114.808, 1132126.731, 1178897.747), stdev = 32879.317
  CI (99.9%): [1076875.171, 1187378.291] (assumes normal distribution)


# Run complete. Total time: 00:02:35

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                     (capacity)  (readFromCollection)  Mode  Cnt        Score        Error  Units
BenchmarkPreAllocated.testHashMapConstructor          10                  true  avgt    9    73401.432 ±  11108.831  ns/op
BenchmarkPreAllocated.testHashMapFactory              10                  true  avgt    9    85654.498 ±  35390.475  ns/op
BenchmarkPreAllocated.testHashMapConstructor         100                  true  avgt    9   748709.317 ±  99670.183  ns/op
BenchmarkPreAllocated.testHashMapFactory             100                  true  avgt    9  1018216.359 ± 316897.577  ns/op
BenchmarkPreAllocated.testHashSetConstructor          10                  true  avgt    9   107870.971 ±  24049.574  ns/op
BenchmarkPreAllocated.testHashSetFactory              10                  true  avgt    9   111812.125 ±   4572.532  ns/op
BenchmarkPreAllocated.testHashSetConstructor         100                  true  avgt    9  1149005.299 ±  42799.860  ns/op
BenchmarkPreAllocated.testHashSetFactory             100                  true  avgt    9  1132126.731 ±  55251.560  ns/op
